// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password_hash String
  email         String    @unique
  phone         String?
  full_name     String
  role          String    // "resident", "landlord", "admin"
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relations
  resident      Resident?
  landlord      Landlord?
  sent_messages     Message[] @relation("SentMessages")
  received_messages Message[] @relation("ReceivedMessages")
  meter_readings    MeterReading[] @relation("RecordedBy")
}

model Resident {
  id             Int       @id @default(autoincrement())
  user_id        Int       @unique
  room_number    String
  check_in_date  DateTime
  check_out_date DateTime?
  is_active      Boolean   @default(true)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  
  // Relations
  user           User      @relation(fields: [user_id], references: [id])
  room           Room      @relation(fields: [room_number], references: [room_number])
  bills          Bill[]
  reports_filed  Report[]  @relation("ReporterRelation")
  reports_against Report[] @relation("ReportedRelation")
}

model Landlord {
  id          Int       @id @default(autoincrement())
  user_id     Int       @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  user         User          @relation(fields: [user_id], references: [id])
  announcements Announcement[]
}

model Room {
  id          Int       @id @default(autoincrement())
  room_number String    @unique
  floor       String
  building    String
  room_size   Float
  base_rent   Float
  is_active   Boolean   @default(true)
  
  // Relations
  residents   Resident[]
  meters      Meter[]
}

model Bill {
  id                  Int       @id @default(autoincrement())
  resident_id         Int
  total_amount        Float
  billing_period_start DateTime
  billing_period_end   DateTime
  due_date            DateTime
  status              String    // "pending", "paid", "overdue"
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  // Relations
  resident            Resident  @relation(fields: [resident_id], references: [id])
  bill_items          BillItem[]
  payments            Payment[]
}

model BillItem {
  id              Int       @id @default(autoincrement())
  bill_id         Int
  utility_type_id Int
  amount          Float
  unit_used       Float
  rate            Float
  description     String?
  
  // Relations
  bill            Bill        @relation(fields: [bill_id], references: [id])
  utility_type    UtilityType @relation(fields: [utility_type_id], references: [id])
}

model UtilityType {
  id          Int       @id @default(autoincrement())
  name        String
  unit        String
  is_active   Boolean   @default(true)
  
  // Relations
  meters      Meter[]
  utility_rates UtilityRate[]
  bill_items  BillItem[]
}

model UtilityRate {
  id              Int       @id @default(autoincrement())
  utility_type_id Int
  rate            Float
  min_unit        Float?
  max_unit        Float?
  effective_date  DateTime
  is_active       Boolean   @default(true)
  
  // Relations
  utility_type    UtilityType @relation(fields: [utility_type_id], references: [id])
}

model Meter {
  id              Int       @id @default(autoincrement())
  room_id         Int
  utility_type_id Int
  meter_number    String    @unique
  installation_date DateTime
  is_active       Boolean   @default(true)
  
  // Relations
  room            Room        @relation(fields: [room_id], references: [id])
  utility_type    UtilityType @relation(fields: [utility_type_id], references: [id])
  meter_readings  MeterReading[]
}

model MeterReading {
  id            Int       @id @default(autoincrement())
  meter_id      Int
  reading       Float
  reading_date  DateTime
  recorded_by   Int
  note          String?
  
  // Relations
  meter         Meter      @relation(fields: [meter_id], references: [id])
  user          User       @relation("RecordedBy", fields: [recorded_by], references: [id])
}

model Payment {
  id                Int       @id @default(autoincrement())
  bill_id           Int
  payment_method_id Int
  amount            Float
  payment_date      DateTime
  transaction_id    String?
  status            String    // "pending", "completed", "failed"
  created_at        DateTime  @default(now())
  
  // Relations
  bill              Bill          @relation(fields: [bill_id], references: [id])
  payment_method    PaymentMethod @relation(fields: [payment_method_id], references: [id])
}

model PaymentMethod {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  is_active   Boolean   @default(true)
  
  // Relations
  payments    Payment[]
}

model Announcement {
  id            Int       @id @default(autoincrement())
  landlord_id   Int
  title         String
  content       String
  publish_date  DateTime
  expiry_date   DateTime
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relations
  landlord      Landlord  @relation(fields: [landlord_id], references: [id])
}

model Report {
  id            Int       @id @default(autoincrement())
  reporter_id   Int
  reported_id   Int
  title         String
  description   String
  status        String    // "pending", "investigating", "resolved"
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relations
  reporter      Resident  @relation("ReporterRelation", fields: [reporter_id], references: [id])
  reported      Resident  @relation("ReportedRelation", fields: [reported_id], references: [id])
}

model Message {
  id          Int       @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  content     String
  is_read     Boolean   @default(false)
  sent_at     DateTime  @default(now())
  read_at     DateTime?
  
  // Relations
  sender      User      @relation("SentMessages", fields: [sender_id], references: [id])
  receiver    User      @relation("ReceivedMessages", fields: [receiver_id], references: [id])
}

